<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MobileReportLive 2" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables local" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Authorization1" elementType="Argument">
            <stringProp name="Argument.name">Authorization1</stringProp>
            <stringProp name="Argument.value">1002089905.1002089616.4cae9491accd238c35200d0e14b57c154515a123cad2ba719a78962fe42e87dd4b8fb3490289b4fe32c37fbc481e95a4eff8e9ad8eca8e6d965baba5b62c10a4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url1" elementType="Argument">
            <stringProp name="Argument.name">url1</stringProp>
            <stringProp name="Argument.value">loadtest47.localzohocreatorportal.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authorization1" elementType="Argument">
            <stringProp name="Argument.name">Authorization1</stringProp>
            <stringProp name="Argument.value">Zoho-oauthtoken 1002.4f661bc384026ee577a183351f4df9a4.486d0ddccdd2ee7d70d6086b8fa22670</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">creator.localzoho.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resultfile1" elementType="Argument">
            <stringProp name="Argument.name">resultfile1</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/MobileReportLive/Results/ResultFile.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authfile" elementType="Argument">
            <stringProp name="Argument.name">Authfile</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/Auth.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authfile1" elementType="Argument">
            <stringProp name="Argument.name">Authfile1</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/Auth.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resultfile" elementType="Argument">
            <stringProp name="Argument.name">resultfile</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/mobilereportlive.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authfileuitest" elementType="Argument">
            <stringProp name="Argument.name">Authfileuitest</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/Authfileuitest.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthfileCreatorqaC5new" elementType="Argument">
            <stringProp name="Argument.name">AuthfileCreatorqaC5new</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/AuthfileCreatorqaC5new.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthfileCreatorqaC53" elementType="Argument">
            <stringProp name="Argument.name">AuthfileCreatorqaC53</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/AuthfileCreatorqaC53.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthfileCreatorqaC5" elementType="Argument">
            <stringProp name="Argument.name">AuthfileCreatorqaC5</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/AuthfileCreatorqaC5.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables server" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="Authorization1" elementType="Argument">
            <stringProp name="Argument.name">Authorization1</stringProp>
            <stringProp name="Argument.value">1002089905.1002089616.4cae9491accd238c35200d0e14b57c154515a123cad2ba719a78962fe42e87dd4b8fb3490289b4fe32c37fbc481e95a4eff8e9ad8eca8e6d965baba5b62c10a4</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url1" elementType="Argument">
            <stringProp name="Argument.name">url1</stringProp>
            <stringProp name="Argument.value">loadtest47.localzohocreatorportal.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authorization" elementType="Argument">
            <stringProp name="Argument.name">Authorization</stringProp>
            <stringProp name="Argument.value">Zoho-oauthtoken 1002.4f661bc384026ee577a183351f4df9a4.486d0ddccdd2ee7d70d6086b8fa22670</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="url" elementType="Argument">
            <stringProp name="Argument.name">url</stringProp>
            <stringProp name="Argument.value">creator.localzoho.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resultfile" elementType="Argument">
            <stringProp name="Argument.name">resultfile</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/MobileReportLive/Results/ResultFile.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authfile1" elementType="Argument">
            <stringProp name="Argument.name">Authfile1</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/Auth.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authfile" elementType="Argument">
            <stringProp name="Argument.name">Authfile</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/Auth.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="resultfile1" elementType="Argument">
            <stringProp name="Argument.name">resultfile1</stringProp>
            <stringProp name="Argument.value">/Users/test/Works/creatoru16/mobilereportlive.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Authfileuitest" elementType="Argument">
            <stringProp name="Argument.name">Authfileuitest</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/Authfileuitest.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthfileCreatorqaC5new" elementType="Argument">
            <stringProp name="Argument.name">AuthfileCreatorqaC5new</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/AuthfileCreatorqaC5new.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthfileCreatorqaC53" elementType="Argument">
            <stringProp name="Argument.name">AuthfileCreatorqaC53</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/AuthfileCreatorqaC53.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AuthfileCreatorqaC5" elementType="Argument">
            <stringProp name="Argument.name">AuthfileCreatorqaC5</stringProp>
            <stringProp name="Argument.value">/Users/test/apache-jmeter-5.1/bin/FilesForServerSideTesting/Mobile/AuthfileCreatorqaC5.csv</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="AGENT-TYPE" elementType="Header">
            <stringProp name="Header.name">AGENT-TYPE</stringProp>
            <stringProp name="Header.value">ZohoCreator - Android</stringProp>
          </elementProp>
          <elementProp name="Content-Type" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
          </elementProp>
          <elementProp name="Accept-Encoding" elementType="Header">
            <stringProp name="Header.name">Accept-Encoding</stringProp>
            <stringProp name="Header.value">gzip</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
          </elementProp>
          <elementProp name="zc_device_info" elementType="Header">
            <stringProp name="Header.name">zc_device_info</stringProp>
            <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">${Authorization}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </SetupThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="serURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">https://creator.localzoho.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">serURL</stringProp>
              </elementProp>
              <elementProp name="user" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">loadtest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">user</stringProp>
              </elementProp>
              <elementProp name="product" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">zcreator</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">product</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.89.26</stringProp>
          <stringProp name="HTTPSampler.port">8081</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/VisionClientAPI/zc/genTokens/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="AGENT-TYPE" elementType="Header">
                <stringProp name="Header.name">AGENT-TYPE</stringProp>
                <stringProp name="Header.value">ZohoCreator - Android</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
              </elementProp>
              <elementProp name="zc_device_info" elementType="Header">
                <stringProp name="Header.name">zc_device_info</stringProp>
                <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();
Time=prev.getStartTime();

Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);
//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};
//List&lt;String&gt; lines=new ArrayList&lt;String&gt;();
if(!(Response.contains(&quot;java&quot;))&amp;&amp; !(Response.contains(&quot;exception&quot;)))
{
String lines=&quot;&quot;;
String line=null;
BufferedReader Buff = new BufferedReader(new FileReader(&quot;${Authfile}&quot;));
        while((line=Buff.readLine())!=null)
        {
        	if(line.contains(&quot;${url}&quot;))
        		line=&quot;${url},&quot;+Response;

       	lines=lines+line+&quot;\n&quot;;
        }
        
        log.info(lines);

 Buff.close();
 FileWriter fw = new FileWriter(&quot;${Authfile}&quot;);
            BufferedWriter out = new BufferedWriter(fw);
            
            out.write(lines);
            out.flush();
            out.close();

}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">json</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="serURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">https://creator.localzoho.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">serURL</stringProp>
              </elementProp>
              <elementProp name="user" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">uitest</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">user</stringProp>
              </elementProp>
              <elementProp name="product" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">zcreator</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">product</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.89.26</stringProp>
          <stringProp name="HTTPSampler.port">8081</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/VisionClientAPI/zc/genTokens/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="AGENT-TYPE" elementType="Header">
                <stringProp name="Header.name">AGENT-TYPE</stringProp>
                <stringProp name="Header.value">ZohoCreator - Android</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
              </elementProp>
              <elementProp name="zc_device_info" elementType="Header">
                <stringProp name="Header.name">zc_device_info</stringProp>
                <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();
Time=prev.getStartTime();

Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);
//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};
//List&lt;String&gt; lines=new ArrayList&lt;String&gt;();
if(!(Response.contains(&quot;java&quot;))&amp;&amp; !(Response.contains(&quot;exception&quot;)))
{
String lines=&quot;&quot;;
String line=null;
BufferedReader Buff = new BufferedReader(new FileReader(&quot;${Authfileuitest}&quot;));
        while((line=Buff.readLine())!=null)
        {
        	if(line.contains(&quot;${url}&quot;))
        		line=&quot;${url},&quot;+Response;

       	lines=lines+line+&quot;\n&quot;;
        }
        
        log.info(lines);

 Buff.close();
 FileWriter fw = new FileWriter(&quot;${Authfileuitest}&quot;);
            BufferedWriter out = new BufferedWriter(fw);
            
            out.write(lines);
            out.flush();
            out.close();
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">json</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="serURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">https://creator.localzoho.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">serURL</stringProp>
              </elementProp>
              <elementProp name="user" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">creatorqac5new</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">user</stringProp>
              </elementProp>
              <elementProp name="product" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">zcreator</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">product</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.89.26</stringProp>
          <stringProp name="HTTPSampler.port">8081</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/VisionClientAPI/zc/genTokens/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="AGENT-TYPE" elementType="Header">
                <stringProp name="Header.name">AGENT-TYPE</stringProp>
                <stringProp name="Header.value">ZohoCreator - Android</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
              </elementProp>
              <elementProp name="zc_device_info" elementType="Header">
                <stringProp name="Header.name">zc_device_info</stringProp>
                <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();
Time=prev.getStartTime();

Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);
//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};
//List&lt;String&gt; lines=new ArrayList&lt;String&gt;();
if(!(Response.contains(&quot;java&quot;))&amp;&amp; !(Response.contains(&quot;exception&quot;)))
{
String lines=&quot;&quot;;
String line=null;
BufferedReader Buff = new BufferedReader(new FileReader(&quot;${AuthfileCreatorqaC5new}&quot;));
        while((line=Buff.readLine())!=null)
        {
        	if(line.contains(&quot;${url}&quot;))
        		line=&quot;${url},&quot;+Response;

       	lines=lines+line+&quot;\n&quot;;
        }
        
        log.info(lines);

 Buff.close();
 FileWriter fw = new FileWriter(&quot;${AuthfileCreatorqaC5new}&quot;);
            BufferedWriter out = new BufferedWriter(fw);
            
            out.write(lines);
            out.flush();
            out.close();
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">json</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="serURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">https://creator.localzoho.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">serURL</stringProp>
              </elementProp>
              <elementProp name="user" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">creatorqac53</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">user</stringProp>
              </elementProp>
              <elementProp name="product" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">zcreator</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">product</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.89.26</stringProp>
          <stringProp name="HTTPSampler.port">8081</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/VisionClientAPI/zc/genTokens/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="AGENT-TYPE" elementType="Header">
                <stringProp name="Header.name">AGENT-TYPE</stringProp>
                <stringProp name="Header.value">ZohoCreator - Android</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
              </elementProp>
              <elementProp name="zc_device_info" elementType="Header">
                <stringProp name="Header.name">zc_device_info</stringProp>
                <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();
Time=prev.getStartTime();

Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);
//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};
//List&lt;String&gt; lines=new ArrayList&lt;String&gt;();
if(!(Response.contains(&quot;java&quot;))&amp;&amp; !(Response.contains(&quot;exception&quot;)))
{
String lines=&quot;&quot;;
String line=null;
BufferedReader Buff = new BufferedReader(new FileReader(&quot;${AuthfileCreatorqaC53}&quot;));
        while((line=Buff.readLine())!=null)
        {
        	if(line.contains(&quot;${url}&quot;))
        		line=&quot;${url},&quot;+Response;

       	lines=lines+line+&quot;\n&quot;;
        }
        
        log.info(lines);

 Buff.close();
 FileWriter fw = new FileWriter(&quot;${AuthfileCreatorqaC53}&quot;);
            BufferedWriter out = new BufferedWriter(fw);
            
            out.write(lines);
            out.flush();
            out.close();
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">json</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getToken" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="serURL" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">https://creator.localzoho.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">serURL</stringProp>
              </elementProp>
              <elementProp name="user" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">creatorqac5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">user</stringProp>
              </elementProp>
              <elementProp name="product" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">zcreator</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">product</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">192.168.89.26</stringProp>
          <stringProp name="HTTPSampler.port">8081</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/VisionClientAPI/zc/genTokens/token</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="AGENT-TYPE" elementType="Header">
                <stringProp name="Header.name">AGENT-TYPE</stringProp>
                <stringProp name="Header.value">ZohoCreator - Android</stringProp>
              </elementProp>
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
              </elementProp>
              <elementProp name="zc_device_info" elementType="Header">
                <stringProp name="Header.name">zc_device_info</stringProp>
                <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();
Time=prev.getStartTime();

Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);
//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};
//List&lt;String&gt; lines=new ArrayList&lt;String&gt;();
if(!(Response.contains(&quot;java&quot;))&amp;&amp; !(Response.contains(&quot;exception&quot;)))
{
String lines=&quot;&quot;;
String line=null;
BufferedReader Buff = new BufferedReader(new FileReader(&quot;${AuthfileCreatorqaC5}&quot;));
        while((line=Buff.readLine())!=null)
        {
        	if(line.contains(&quot;${url}&quot;))
        		line=&quot;${url},&quot;+Response;

       	lines=lines+line+&quot;\n&quot;;
        }
        
        log.info(lines);

 Buff.close();
 FileWriter fw = new FileWriter(&quot;${AuthfileCreatorqaC5}&quot;);
            BufferedWriter out = new BufferedWriter(fw);
            
            out.write(lines);
            out.flush();
            out.close();
}
</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">json</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MRL2 MobileReportLive" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${Authfile}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">url,Authorization</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="QuickFilters" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view meta with quickfilters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/AddedTimeQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="648378617">&quot;autofilters&quot;:[{&quot;displayname&quot;:&quot;Added Time&quot;,&quot;values&quot;:[&quot;Feb - 2020&quot;,&quot;May - 2020&quot;],&quot;labelname&quot;:&quot;Added_Time&quot;}],</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">5</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddedTime QF 1" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Added_Time:Feb - 2020;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/AddedTimeQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1316027801">&quot;appliedfilter&quot;:[{&quot;filtername&quot;:&quot;Added_Time&quot;,&quot;filterval&quot;:&quot;Feb - 2020&quot;}]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[*].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;t&quot;,&quot;e&quot;,&quot;r&quot;,&quot;asdad&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.record_count</stringProp>
              <stringProp name="EXPECTED_VALUE">4</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AddedTime QF 2" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Added_Time:May - 2020;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/AddedTimeQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">s</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DropDownQF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Dropdown:Choice 1;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/DropDownQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].Dropdown</stringProp>
              <stringProp name="EXPECTED_VALUE">Choice 1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">TestA</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RadioQF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Radio:Choice 1;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/RadioQf_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">TestA</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].Radio</stringProp>
              <stringProp name="EXPECTED_VALUE">Choice 1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckboxQF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Checkbox:Choice 1;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/CheckboxQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">TestA</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].Checkbox</stringProp>
              <stringProp name="EXPECTED_VALUE">Choice 1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MultiSelectQF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Multi_Select:Choice 1;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/MultiSelectQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[*].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;TestE&quot;,&quot;TestD&quot;,&quot;TestB&quot;,&quot;TestA&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[*].Multi_Select</stringProp>
              <stringProp name="EXPECTED_VALUE">[[&quot;Choice 1&quot;,&quot;Choice 2&quot;,&quot;Choice 3&quot;],[&quot;Choice 1&quot;,&quot;Choice 2&quot;],[&quot;Choice 1&quot;,&quot;Choice 2&quot;],[&quot;Choice 1&quot;]]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LookUpDropdownQF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LookupBase:54258000004685083;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/LookUpDropdownQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[*].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">TestA</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].LookupBase</stringProp>
              <stringProp name="EXPECTED_VALUE">Choice 1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RadioLookupQF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">LookupBase:54258000004685083;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/RadioLookupQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[*].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">TestA</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].LookupBase</stringProp>
              <stringProp name="EXPECTED_VALUE">Choice 1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckboxLookupQF" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">newLookupBase:54258000004685119;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/CheckboxLookupQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[*].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">TestC</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].newLookupBase</stringProp>
              <stringProp name="EXPECTED_VALUE">URanium#235</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CheckboxLookupQF" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">newLookupBase:54258000004685119;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/mobile-reportsquickfilter/view/CheckboxLookupQF_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="23831259">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516371435212&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c1&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276041&quot;},{&quot;Multi_Line&quot;:&quot;Jack anthony&quot;,&quot;Date_field&quot;:&quot;09-May-2019&quot;,&quot;Email&quot;:&quot;jmeter@x.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c4&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276032&quot;},{&quot;Multi_Line&quot;:&quot;He&apos;ll&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;kanban@z.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Gth&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;],&quot;Dropdown&quot;:&quot;c5&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;ID&quot;:&quot;48576000209276023&quot;},{&quot;Multi_Line&quot;:&quot;hellozohocom&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Email&quot;:&quot;hello@zoho.com&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;],&quot;Single_Line&quot;:&quot;1516289081943&quot;,&quot;Number&quot;:&quot;&quot;,&quot;Checkbox&quot;:[&quot;Choice 2&quot;,&quot;Choice 3&quot;],&quot;Dropdown&quot;:&quot;c2&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276014&quot;},{&quot;Multi_Line&quot;:&quot;Thfcvbbv&quot;,&quot;Date_field&quot;:&quot;10-May-2019&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:[&quot;Choice 1&quot;],&quot;Single_Line&quot;:&quot;Hello&quot;,&quot;Number&quot;:&quot;1234&quot;,&quot;Checkbox&quot;:[&quot;Choice 1&quot;],&quot;Dropdown&quot;:&quot;c3&quot;,&quot;Phone_Number&quot;:{&quot;value&quot;:&quot;+919786149952&quot;},&quot;Radio&quot;:&quot;Choice 2&quot;,&quot;ID&quot;:&quot;48576000209276005&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:5,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[*].Single_Line</stringProp>
              <stringProp name="EXPECTED_VALUE">TestC</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data[0].newLookupBase</stringProp>
              <stringProp name="EXPECTED_VALUE">URanium#235</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="View Records meta" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="view records API External User FIle Upload Field Data" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/basic-views/view/Complex_fields_jmeter_Report</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1225424938">/api/v2/loadtest/basic-views/report/Complex_fields_jmeter_Report/54258000001305019/File_upload/download</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data.length()</stringProp>
              <stringProp name="EXPECTED_VALUE">5</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Download FIle API External USer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/basic-views/report/Complex_fields_jmeter_Report/54258000001305007/File_upload/download</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-84523554">Name,Email,Address,Phone Number,Single Line,Multi Line,Number,Date,Drop Down,Radio,Multi Select,Checkbox</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Export Record API External User With Parameter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filetype" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filetype</stringProp>
                </elementProp>
                <elementProp name="zc_SelectedRecId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">54258000001305019</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">zc_SelectedRecId</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/basic-views/report/Complex_fields_jmeter_Report/export</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1579820475">Phone,Rich Text,Image,Percent,Currency,Decimal,Date-Time,File upload,Auto Number,Formula,Users,Integration,BaseForm,Single Line,Added User
+911234567890,this is andaman nicobar islands,/sharedBy/appLinkName/viewLinkName/fieldName/image/1562330368772_Screenshot_20190402-151318.png,12.34,123.00,23.45,22-May-2019 15:17:38,1562330369455_Screenshot_20190402-151349.png,5,158.79,,Agent,Test,Test,loadtest</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Export Record API External User Without Parameter Record IDs" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="filetype" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">csv</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filetype</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/basic-views/report/Complex_fields_jmeter_Report/export</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1579820475">Phone,Rich Text,Image,Percent,Currency,Decimal,Date-Time,File upload,Auto Number,Formula,Users,Integration,BaseForm,Single Line,Added User
+911234567890,this is andaman nicobar islands,/sharedBy/appLinkName/viewLinkName/fieldName/image/1562330368772_Screenshot_20190402-151318.png,12.34,123.00,23.45,22-May-2019 15:17:38,1562330369455_Screenshot_20190402-151349.png,5,158.79,,Agent,Test,Test,loadtest</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Grant edit Support API for application" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/editsupportapp/editsupport</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="940050781">{&quot;code&quot;:3000,&quot;edit_access&quot;:true}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status of Edit Support API for application" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/editsupportapp/editsupport</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="940050781">{&quot;code&quot;:3000,&quot;edit_access&quot;:true}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Remove Edit Support API for application" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/editsupportapp/editsupport</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="940050781">{&quot;code&quot;:3000,&quot;edit_access&quot;:true}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Status of Edit Support API for application after removal" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/editsupportapp/editsupport</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1339960116">{&quot;code&quot;:3000,&quot;edit_access&quot;:false}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="GetRecord count API" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetRecord count API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/basic-views/report/Complex_fields_jmeter_Report/recordcount</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="207431760">{&quot;result&quot;:{&quot;records_count&quot;:&quot;5&quot;},&quot;code&quot;:3000}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result.records_count</stringProp>
              <stringProp name="EXPECTED_VALUE">5</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Map Location APis" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Map view response with coordinates" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc-latitude" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">18.112437</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">zc-latitude</stringProp>
                </elementProp>
                <elementProp name="zc-longitude" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">79.0193</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">zc-longitude</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/basic-views-2/view/Map_Report1/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-945600582">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:&quot;&quot;,&quot;Address&quot;:{&quot;address_line_12&quot;:&quot;Kumarpally&quot;,&quot;address_line_22&quot;:&quot;hanamkonda&quot;,&quot;longitude2&quot;:&quot;79.5668106981281&quot;,&quot;address&quot;:&quot;Kumarpally, hanamkonda, warangal, Telangana, 506001, India&quot;,&quot;postal_Code2&quot;:&quot;506001&quot;,&quot;state_province2&quot;:&quot;Telangana&quot;,&quot;latitude&quot;:&quot;18.0131835&quot;,&quot;district_city2&quot;:&quot;warangal&quot;,&quot;longitude&quot;:&quot;79.5668106981281&quot;,&quot;latitude2&quot;:&quot;18.0131835&quot;,&quot;country2&quot;:&quot;India&quot;},&quot;Dropdown&quot;:&quot;&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;lon&quot;:&quot;79.5668106981281&quot;,&quot;Name&quot;:&quot;&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Name_ZCSUBFIELDS&quot;:{&quot;prefix&quot;:&quot;&quot;,&quot;formattedname&quot;:&quot;&quot;,&quot;last_name&quot;:&quot;&quot;,&quot;suffix&quot;:&quot;&quot;,&quot;first_name&quot;:&quot;&quot;},&quot;Single_Line&quot;:&quot;One&quot;,&quot;Number&quot;:&quot;1&quot;,&quot;Checkbox&quot;:&quot;&quot;,&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;54258000011608012&quot;,&quot;lat&quot;:&quot;18.0131835&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:1,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Map view response without coordinates" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/basic-views-2/view/Map_Report1/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-821432686">{&quot;data&quot;:[],&quot;submeta&quot;:{&quot;recordcount&quot;:1,&quot;isGrouped&quot;:false}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Map view response with coordinates meta" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/basic-views-2/view/Map_Report1/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-945600582">{&quot;data&quot;:[{&quot;Multi_Line&quot;:&quot;&quot;,&quot;Email&quot;:&quot;&quot;,&quot;Multi_Select&quot;:&quot;&quot;,&quot;Address&quot;:{&quot;address_line_12&quot;:&quot;Kumarpally&quot;,&quot;address_line_22&quot;:&quot;hanamkonda&quot;,&quot;longitude2&quot;:&quot;79.5668106981281&quot;,&quot;address&quot;:&quot;Kumarpally, hanamkonda, warangal, Telangana, 506001, India&quot;,&quot;postal_Code2&quot;:&quot;506001&quot;,&quot;state_province2&quot;:&quot;Telangana&quot;,&quot;latitude&quot;:&quot;18.0131835&quot;,&quot;district_city2&quot;:&quot;warangal&quot;,&quot;longitude&quot;:&quot;79.5668106981281&quot;,&quot;latitude2&quot;:&quot;18.0131835&quot;,&quot;country2&quot;:&quot;India&quot;},&quot;Dropdown&quot;:&quot;&quot;,&quot;Phone_Number&quot;:&quot;&quot;,&quot;Radio&quot;:&quot;Choice 1&quot;,&quot;lon&quot;:&quot;79.5668106981281&quot;,&quot;Name&quot;:&quot;&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Name_ZCSUBFIELDS&quot;:{&quot;prefix&quot;:&quot;&quot;,&quot;formattedname&quot;:&quot;&quot;,&quot;last_name&quot;:&quot;&quot;,&quot;suffix&quot;:&quot;&quot;,&quot;first_name&quot;:&quot;&quot;},&quot;Single_Line&quot;:&quot;One&quot;,&quot;Number&quot;:&quot;1&quot;,&quot;Checkbox&quot;:&quot;&quot;,&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;54258000011608012&quot;,&quot;lat&quot;:&quot;18.0131835&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:1,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Report Columns API" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Report Columns Fetch API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/RadioLookupNewEntryCheck_Report/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1624611947">{&quot;code&quot;:3000,&quot;columns&quot;:[{&quot;display_name&quot;:&quot;AddressLookup&quot;,&quot;link_name&quot;:&quot;AddressLookup&quot;,&quot;type&quot;:13},{&quot;display_name&quot;:&quot;CurrencyLookup&quot;,&quot;link_name&quot;:&quot;CurrencyLookup&quot;,&quot;type&quot;:13},{&quot;display_name&quot;:&quot;DateLookup&quot;,&quot;link_name&quot;:&quot;DateLookup&quot;,&quot;type&quot;:13},{&quot;display_name&quot;:&quot;DateTimeLookup&quot;,&quot;link_name&quot;:&quot;DateTimeLookup&quot;,&quot;type&quot;:13},{&quot;display_name&quot;:&quot;DecimalLookup&quot;,&quot;link_name&quot;:&quot;DecimalLookup&quot;,&quot;type&quot;:13},{&quot;display_name&quot;:&quot;EmailLookup&quot;,&quot;link_name&quot;:&quot;EmailLookup&quot;,&quot;type&quot;:13},{&quot;display_name&quot;:&quot;FormulaLookup&quot;,&quot;link_name&quot;:&quot;FormulaLookup&quot;,&quot;type&quot;:13}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Report Columns Fetch API Detailed view" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="include_summary_columns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">include_summary_columns</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/RadioLookupNewEntryCheck_Report/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;AddressLookup&quot;,&quot;CurrencyLookup&quot;,&quot;DateLookup&quot;,&quot;DateTimeLookup&quot;,&quot;DecimalLookup&quot;,&quot;EmailLookup&quot;,&quot;FormulaLookup&quot;,&quot;NameLookup&quot;,&quot;NumberLookup&quot;,&quot;PercentLookup&quot;,&quot;PhoneNumberLookup&quot;,&quot;SingleLineLookup&quot;,&quot;UsersLookup&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Kanban Report Columns Fetch API Detailed View " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="include_summary_columns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">include_summary_columns</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/kanban_view_mobile/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Name&quot;,&quot;Address&quot;,&quot;Email&quot;,&quot;Phone_Number&quot;,&quot;Single_Line&quot;,&quot;Multi_Line&quot;,&quot;Number&quot;,&quot;Date_field&quot;,&quot;Dropdown&quot;,&quot;Radio&quot;,&quot;Multi_Select&quot;,&quot;Checkbox&quot;,&quot;Decision_box&quot;,&quot;Rich_Text&quot;,&quot;Url&quot;,&quot;Image&quot;,&quot;Percent&quot;,&quot;Currency&quot;,&quot;Decimal&quot;,&quot;Date_Time&quot;,&quot;Audio&quot;,&quot;Video&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Kanban Report Columns Fetch API " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/kanban_view_mobile/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Name&quot;,&quot;Address&quot;,&quot;Dropdown&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Timeline Report Columns Fetch API " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/timeline_view_mobile/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Name&quot;,&quot;Address&quot;,&quot;Date_field&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Timeline Report Columns Fetch API Detailed View" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="include_summary_columns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">include_summary_columns</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/timeline_view_mobile/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Name&quot;,&quot;Address&quot;,&quot;Email&quot;,&quot;Phone_Number&quot;,&quot;Single_Line&quot;,&quot;Multi_Line&quot;,&quot;Number&quot;,&quot;Date_field&quot;,&quot;Dropdown&quot;,&quot;Radio&quot;,&quot;Multi_Select&quot;,&quot;Checkbox&quot;,&quot;Decision_box&quot;,&quot;Rich_Text&quot;,&quot;Url&quot;,&quot;Image&quot;,&quot;Percent&quot;,&quot;Currency&quot;,&quot;Decimal&quot;,&quot;Date_Time&quot;,&quot;Audio&quot;,&quot;Video&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="calendar_view_mobile Report Columns Fetch API " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/timeline_view_mobile/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Name&quot;,&quot;Address&quot;,&quot;Date_field&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="calendar_view_mobile Report Columns Fetch API Detailed View" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="include_summary_columns" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">include_summary_columns</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/timeline_view_mobile/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Name&quot;,&quot;Address&quot;,&quot;Email&quot;,&quot;Phone_Number&quot;,&quot;Single_Line&quot;,&quot;Multi_Line&quot;,&quot;Number&quot;,&quot;Date_field&quot;,&quot;Dropdown&quot;,&quot;Radio&quot;,&quot;Multi_Select&quot;,&quot;Checkbox&quot;,&quot;Decision_box&quot;,&quot;Rich_Text&quot;,&quot;Url&quot;,&quot;Image&quot;,&quot;Percent&quot;,&quot;Currency&quot;,&quot;Decimal&quot;,&quot;Date_Time&quot;,&quot;Audio&quot;,&quot;Video&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Report Columns Fetch API  With Agent Type Zoho Writer" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="AGNENT-TYPE" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Zoho-Writer</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">AGNENT-TYPE</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/viewtypechangecheck/report/timeline_view_mobile/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoWriter</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[0].form_component_id</stringProp>
              <stringProp name="EXPECTED_VALUE">54258000012617119</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Timeline Report Columns Fetch API with end date as null" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/customaction/report/Timeline/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Single_Line&quot;,&quot;Added_Time&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calendar Report Columns Fetch API with end date as null" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/customaction/report/calendar_with_null_end_date/columns</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.columns[*].link_name</stringProp>
              <stringProp name="EXPECTED_VALUE">[&quot;Single_Line&quot;,&quot;Added_Time&quot;]</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Show Xml API" enabled="false">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetRecord count API" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                </elementProp>
                <elementProp name="appLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">integration-forms</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">appLinkName</stringProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Leads_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="fromService" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">ZohoCRM</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">fromService</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/showXml.do</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="207431760">{&quot;result&quot;:{&quot;records_count&quot;:&quot;5&quot;},&quot;code&quot;:3000}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.result.records_count</stringProp>
              <stringProp name="EXPECTED_VALUE">5</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Custom Filters" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Name based customfilter " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:54258000013674449;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/customfilters/view/simple_fileds_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="466385880">&quot;criterianame&quot;:&quot;name joy&quot;}</stringProp>
                <stringProp name="-1364093878">&quot;Name&quot;:&quot;kiruba joy&quot;,&quot;Date_field&quot;:&quot;&quot;,&quot;Name_ZCSUBFIELDS&quot;:{&quot;prefix&quot;:&quot;&quot;,&quot;formattedname&quot;:&quot;kiruba joy&quot;,&quot;last_name&quot;:&quot;joy&quot;,&quot;suffix&quot;:&quot;&quot;,&quot;first_name&quot;:&quot;kiruba&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="single line based customfilter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:54258000013674451;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/customfilters/view/simple_fileds_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1869832387">&quot;criterianame&quot;:&quot;singleline starts with s&quot;}</stringProp>
                <stringProp name="-677852863">&quot;Single_Line&quot;:&quot;start&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Multiselect based customfilter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:54258000013674453;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/customfilters/view/simple_fileds_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1576245172">&quot;criterianame&quot;:&quot;Multiselect contains 1&quot;}</stringProp>
                <stringProp name="-874363823">&quot;Multi_Select&quot;:[&quot;Choice 1&quot;,&quot;Choice 2&quot;]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Date based customfilter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:54258000013674455;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/customfilters/view/simple_fileds_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1543404203">&quot;criterianame&quot;:&quot;Date before 1 sep 2020&quot;}</stringProp>
                <stringProp name="2095898339">&quot;Date_field&quot;:&quot;27-Aug-2020&quot;</stringProp>
                <stringProp name="1485541833">&quot;appliedfilter&quot;:[{&quot;filtername&quot;:&quot;CustomFilter&quot;,&quot;filterval&quot;:&quot;54258000013674455&quot;}]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Email based customfilter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:54258000013674457;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/customfilters/view/simple_fileds_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="443536035">{&quot;criteriaid&quot;:54258000013674457,&quot;criterianame&quot;:&quot;com based email&quot;}</stringProp>
                <stringProp name="-1055282477">&quot;Email&quot;:&quot;hello@z.com&quot;</stringProp>
                <stringProp name="1485601415">&quot;appliedfilter&quot;:[{&quot;filtername&quot;:&quot;CustomFilter&quot;,&quot;filterval&quot;:&quot;54258000013674457&quot;}]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Conditional Formatting" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Conditional Formatting check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/customfilters/view/simple_fileds_conditional_formatting_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-563218971">&quot;conditionalFormatting&quot;:[{&quot;formattingoptions&quot;:{&quot;background-color&quot;:&quot;#e84c3d&quot;,&quot;color&quot;:&quot;#ffffff&quot;},&quot;rulename&quot;:&quot;New Formatting&quot;,&quot;formattype&quot;:1,&quot;linkname&quot;:&quot;[Name]&quot;,&quot;ruleId&quot;:54258000013679515,&quot;iscriteria&quot;:true},{&quot;formattingoptions&quot;:{&quot;background-color&quot;:&quot;#1bbc9b&quot;,&quot;color&quot;:&quot;#000000&quot;},&quot;rulename&quot;:&quot;New Formatting&quot;,&quot;formattype&quot;:1,&quot;linkname&quot;:&quot;[Email]&quot;,&quot;ruleId&quot;:54258000013679519,&quot;iscriteria&quot;:true},{&quot;formattingoptions&quot;:{&quot;background-color&quot;:&quot;#f1c40f&quot;,&quot;color&quot;:&quot;#333&quot;},&quot;rulename&quot;:&quot;New Formatting&quot;,&quot;formattype&quot;:1,&quot;linkname&quot;:&quot;[Single_Line]&quot;,&quot;ruleId&quot;:54258000013679523,&quot;iscriteria&quot;:true},{&quot;formattingoptions&quot;:{&quot;background-color&quot;:&quot;#c7c116&quot;,&quot;color&quot;:&quot;#333&quot;},&quot;rulename&quot;:&quot;New Formatting&quot;,&quot;formattype&quot;:1,&quot;linkname&quot;:&quot;[Radio]&quot;,&quot;ruleId&quot;:54258000013679535,&quot;iscriteria&quot;:true}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">5</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Calendar start and end config" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calendar report with start date as date enddate as none" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/calendar-and-timeline/view/only_datetime_report1/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-189610282">&quot;calendar_configuration&quot;:{&quot;allowedViews&quot;:[&quot;month&quot;,&quot;week&quot;,&quot;day&quot;],&quot;event_configs&quot;:[],&quot;title&quot;:&quot;Email&quot;,&quot;calWeekStartsOn&quot;:0,&quot;start_date&quot;:&quot;Date_field&quot;,&quot;defaultViewType&quot;:&quot;month&quot;},&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Single Line&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Single_Line&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Number&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Number&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Drop Down&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Dropdown&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Date_field&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Date-Time&quot;,&quot;isshowsecondsenabled&quot;:true,&quot;type&quot;:&quot;DATE_TIME&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Date_Time&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;permissions&quot;:{&quot;add&quot;:&quot;true&quot;,&quot;edit&quot;:&quot;true&quot;,&quot;bulkedit&quot;:&quot;true&quot;,&quot;duplicate&quot;:&quot;true&quot;,&quot;delete&quot;:&quot;true&quot;,&quot;export&quot;:&quot;true&quot;},&quot;displayname&quot;:&quot;only datetime report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;only datetime&quot;,&quot;linkname&quot;:&quot;only_datetime&quot;},&quot;linkname&quot;:&quot;only_datetime_report1&quot;,&quot;recordcomments&quot;:{&quot;isreadonly&quot;:false,&quot;enabled&quot;:true},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calendar report with start date as date enddate as Datetime" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/calendar-and-timeline/view/Date_and_DateTime_start_and_end/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1018999065">{&quot;data&quot;:[{&quot;Date_Time&quot;:&quot;11-Feb-2026 23:18:11&quot;,&quot;Date_field&quot;:&quot;04-Nov-2020&quot;,&quot;Email&quot;:&quot;&quot;,&quot;start-time&quot;:&quot;2020-11-04&quot;,&quot;Single_Line&quot;:&quot;long event&quot;,&quot;Number&quot;:&quot;&quot;,&quot;end-time&quot;:&quot;2026-02-11 23:18:11&quot;,&quot;Single_Line-rawdata&quot;:&quot;long event&quot;,&quot;Dropdown&quot;:&quot;&quot;,&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;54258000016920011&quot;}],&quot;calendar_configuration&quot;:{&quot;end_date&quot;:&quot;Date_Time&quot;,&quot;allowedViews&quot;:[&quot;month&quot;,&quot;week&quot;,&quot;day&quot;],&quot;event_configs&quot;:[{&quot;start&quot;:&quot;2020-11-04&quot;,&quot;end&quot;:&quot;2026-02-11 23:18:11&quot;,&quot;event_title&quot;:&quot;long event&quot;,&quot;ID&quot;:&quot;54258000016920011&quot;}],&quot;title&quot;:&quot;Single_Line&quot;,&quot;calWeekStartsOn&quot;:0,&quot;start_date&quot;:&quot;Date_field&quot;,&quot;defaultViewType&quot;:&quot;month&quot;},&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Single Line&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Single_Line&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Number&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Number&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Drop Down&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Dropdown&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Date_field&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Date-Time&quot;,&quot;isshowsecondsenabled&quot;:true,&quot;type&quot;:&quot;DATE_TIME&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Date_Time&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;permissions&quot;:{&quot;add&quot;:&quot;true&quot;,&quot;edit&quot;:&quot;true&quot;,&quot;bulkedit&quot;:&quot;true&quot;,&quot;duplicate&quot;:&quot;true&quot;,&quot;delete&quot;:&quot;true&quot;,&quot;export&quot;:&quot;true&quot;},&quot;displayname&quot;:&quot;Date and DateTime start and end&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;date and datetime as start and end&quot;,&quot;linkname&quot;:&quot;date_and_datetime_as_start_and_end&quot;},&quot;linkname&quot;:&quot;Date_and_DateTime_start_and_end&quot;,&quot;recordcomments&quot;:{&quot;isreadonly&quot;:false,&quot;enabled&quot;:true},&quot;totalrecords&quot;:1,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calendar report with start date and end date as Datetime with application date format change" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/calendar-start-and-end-time-config/view/calendar_start_and_end_time/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1117220859">{&quot;data&quot;:[{&quot;end_date_time&quot;:&quot;14-07-23 00:00:35&quot;,&quot;start-time&quot;:&quot;2020-11-06 00:00:32&quot;,&quot;Single_Line&quot;:&quot;One&quot;,&quot;Number&quot;:&quot;123&quot;,&quot;end-time&quot;:&quot;2023-07-14 00:00:35&quot;,&quot;Single_Line-rawdata&quot;:&quot;One&quot;,&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;54258000016920015&quot;,&quot;start_date_time&quot;:&quot;06-11-20 00:00:32&quot;}],&quot;calendar_configuration&quot;:{&quot;end_date&quot;:&quot;end_date_time&quot;,&quot;allowedViews&quot;:[&quot;month&quot;,&quot;week&quot;,&quot;day&quot;],&quot;event_configs&quot;:[{&quot;start&quot;:&quot;2020-11-06 00:00:32&quot;,&quot;end&quot;:&quot;2023-07-14 00:00:35&quot;,&quot;event_title&quot;:&quot;One&quot;,&quot;ID&quot;:&quot;54258000016920015&quot;}],&quot;title&quot;:&quot;Single_Line&quot;,&quot;calWeekStartsOn&quot;:0,&quot;start_date&quot;:&quot;start_date_time&quot;,&quot;defaultViewType&quot;:&quot;month&quot;},&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Single Line&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Single_Line&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Number&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Number&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;start date time&quot;,&quot;isshowsecondsenabled&quot;:true,&quot;type&quot;:&quot;DATE_TIME&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;start_date_time&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;end date time&quot;,&quot;isshowsecondsenabled&quot;:true,&quot;type&quot;:&quot;DATE_TIME&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;end_date_time&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Integration Forms" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM Leads module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/Leads_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="43049886">{&quot;First_Name&quot;:&quot;Rod&quot;,&quot;Company&quot;:&quot;Command APT&quot;,&quot;Email&quot;:&quot;ralderton@mail.com&quot;,&quot;Last_Name&quot;:&quot;Alderton&quot;,&quot;ID&quot;:&quot;635113000000271151&quot;},{&quot;First_Name&quot;:&quot;Kevin&quot;,&quot;Company&quot;:&quot;Truman Mortgages&quot;,&quot;Email&quot;:&quot;agentk@mail.com&quot;,&quot;Last_Name&quot;:&quot;Agent&quot;,&quot;ID&quot;:&quot;635113000000271150&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM Vendors module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/Vendors_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2132160346">&quot;data&quot;:[{&quot;Vendor_Name&quot;:&quot;Zoho CRM&quot;,&quot;ID&quot;:&quot;635113000000510045&quot;},{&quot;Vendor_Name&quot;:&quot;Zoho Creator QA&quot;,&quot;ID&quot;:&quot;635113000000510003&quot;}]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM Products data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/Products_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="76126524">[{&quot;Product_Name&quot;:&quot;Zoho CRM&quot;,&quot;ID&quot;:&quot;635113000000510056&quot;},{&quot;Product_Name&quot;:&quot;Zoho Creator&quot;,&quot;ID&quot;:&quot;635113000000510014&quot;}]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM Contacts data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/Contacts_Integ_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1434469654">{&quot;data&quot;:[{&quot;Last_Name&quot;:&quot;Marrier (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270096&quot;},{&quot;Last_Name&quot;:&quot;Wieser (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270095&quot;},{&quot;Last_Name&quot;:&quot;Dilliard (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270094&quot;},{&quot;Last_Name&quot;:&quot;Tollner (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270093&quot;},{&quot;Last_Name&quot;:&quot;Morasca (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270092&quot;},{&quot;Last_Name&quot;:&quot;Foller (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270091&quot;},{&quot;Last_Name&quot;:&quot;Paprocki (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270090&quot;},{&quot;Last_Name&quot;:&quot;Venere (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270089&quot;},{&quot;Last_Name&quot;:&quot;Darakjy (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270088&quot;},{&quot;Last_Name&quot;:&quot;Butt (Sample)&quot;,&quot;ID&quot;:&quot;635113000000270087&quot;}]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho CRM Leads Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Leads_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">635113000000271151</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/form/Leads/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-633856277">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;First_Name&quot;:&quot;Rod&quot;,&quot;Company&quot;:&quot;Command APT&quot;,&quot;Email&quot;:&quot;ralderton@mail.com&quot;,&quot;Last_Name&quot;:&quot;Alderton&quot;,&quot;LEADID&quot;:&quot;635113000000271151&quot;},&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Company&quot;,&quot;link_name&quot;:&quot;Company&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:3,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Last Name&quot;,&quot;link_name&quot;:&quot;Last_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:4,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Email&quot;,&quot;link_name&quot;:&quot;Email&quot;,&quot;type&quot;:3,&quot;mandatory&quot;:false},{&quot;sequence_number&quot;:5,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;First Name&quot;,&quot;link_name&quot;:&quot;First_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:false}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Leads&quot;,&quot;link_name&quot;:&quot;Leads&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:2}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho CRM Vendors Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Vendors_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">635113000000510003</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/form/Vendors/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="973727397">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;VENDORID&quot;:&quot;635113000000510003&quot;,&quot;Vendor_Name&quot;:&quot;Zoho Creator QA&quot;},&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Vendor Name&quot;,&quot;link_name&quot;:&quot;Vendor_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Vendors&quot;,&quot;link_name&quot;:&quot;Vendors&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:5}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho CRM products Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Products_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">635113000000510056</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/form/Products/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1043454144">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;Product_Name&quot;:&quot;Zoho CRM&quot;,&quot;PRODUCTID&quot;:&quot;635113000000510056&quot;},&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Product Name&quot;,&quot;link_name&quot;:&quot;Product_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Products&quot;,&quot;link_name&quot;:&quot;Products&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:2}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho CRM Contacts Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Contacts_Integ_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">635113000000270095</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/form/Contacts_Integ/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2018362922">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;First_Name&quot;:&quot;Sage&quot;,&quot;Last_Name&quot;:&quot;Wieser (Sample)&quot;,&quot;Lead_Source&quot;:&quot;Advertisement&quot;,&quot;Account_Name&quot;:&quot;Truhlar And Truhlar (Sample)&quot;,&quot;CONTACTID&quot;:&quot;635113000000270095&quot;},&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Account Name&quot;,&quot;link_name&quot;:&quot;Account_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:false},{&quot;sequence_number&quot;:3,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;display_name&quot;:&quot;Lead Source&quot;,&quot;link_name&quot;:&quot;Lead_Source&quot;,&quot;type&quot;:12,&quot;choices&quot;:[{&quot;value&quot;:&quot;Advertisement&quot;,&quot;key&quot;:&quot;Advertisement&quot;},{&quot;value&quot;:&quot;Cold Call&quot;,&quot;key&quot;:&quot;Cold Call&quot;},{&quot;value&quot;:&quot;Employee Referral&quot;,&quot;key&quot;:&quot;Employee Referral&quot;},{&quot;value&quot;:&quot;External Referral&quot;,&quot;key&quot;:&quot;External Referral&quot;},{&quot;value&quot;:&quot;Partner&quot;,&quot;key&quot;:&quot;Partner&quot;},{&quot;value&quot;:&quot;Public Relations&quot;,&quot;key&quot;:&quot;Public Relations&quot;},{&quot;value&quot;:&quot;Trade Show&quot;,&quot;key&quot;:&quot;Trade Show&quot;},{&quot;value&quot;:&quot;Web Form&quot;,&quot;key&quot;:&quot;Web Form&quot;},{&quot;value&quot;:&quot;Search Engine&quot;,&quot;key&quot;:&quot;Search Engine&quot;},{&quot;value&quot;:&quot;Chat&quot;,&quot;key&quot;:&quot;Chat&quot;}],&quot;mandatory&quot;:false},{&quot;sequence_number&quot;:4,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;First Name&quot;,&quot;link_name&quot;:&quot;First_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:false},{&quot;sequence_number&quot;:5,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Last Name&quot;,&quot;link_name&quot;:&quot;Last_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Contacts Integ&quot;,&quot;link_name&quot;:&quot;Contacts_Integ&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:2}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report SalesForce solution module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/SFsol_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-494660423">{&quot;data&quot;:[{&quot;</stringProp>
                <stringProp name="409124740">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Solution Title&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;SolutionName&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Solution Details&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;SolutionNote&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;SFsol Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;SFsol&quot;,&quot;linkname&quot;:&quot;SFsol&quot;},&quot;linkname&quot;:&quot;SFsol_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms SalesForce solution Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">SFsol_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">5013h0000001KrbAAE</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/form/SFsol/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="676365352">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;</stringProp>
                <stringProp name="1938601320">&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Solution Title&quot;,&quot;link_name&quot;:&quot;SolutionName&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;SFsol&quot;,&quot;link_name&quot;:&quot;SFsol&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:2}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report SalesForce Leads module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/SalesForce_Leads_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="-1590242577">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Last Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;LastName&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Company&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Company&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Lead Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Salutation&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Salutation&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;First Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;FirstName&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Title&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Title&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Lead Source&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;LeadSource&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Industry&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Industry&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Annual Revenue&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;AnnualRevenue&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Phone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mobile Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;MobilePhone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Fax&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Fax&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Website&quot;,&quot;type&quot;:&quot;URL&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Website&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Rating&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Rating&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;No of Employees&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;NumberOfEmployees&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Street&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;State/Province&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Zip/Postal Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;PostalCode&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Product Interest&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;ProductInterest__c&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;SIC Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:23,&quot;labelname&quot;:&quot;SICCode__c&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Number of Locations&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:24,&quot;labelname&quot;:&quot;NumberofLocations__c&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Current Generator(s)&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:25,&quot;labelname&quot;:&quot;CurrentGenerators__c&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Primary&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:26,&quot;labelname&quot;:&quot;Primary__c&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:27,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;SalesForce Leads Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;SalesForce Leads&quot;,&quot;linkname&quot;:&quot;SalesForce_Leads&quot;},&quot;linkname&quot;:&quot;SalesForce_Leads_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms SalesForce Leads Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">SalesForce_Leads_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">00Q3h000005YRL4EAO</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/form/SalesForce_Leads/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2100028218">{&quot;code&quot;:3000,&quot;data&quot;:{</stringProp>
                <stringProp name="-993965587">&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:4,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Last Name&quot;,&quot;link_name&quot;:&quot;LastName&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:5,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Company&quot;,&quot;link_name&quot;:&quot;Company&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:15,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;display_name&quot;:&quot;Lead Status&quot;,&quot;link_name&quot;:&quot;Status&quot;,&quot;type&quot;:12,&quot;choices&quot;:[{&quot;value&quot;:&quot;Working - Contacted&quot;,&quot;key&quot;:&quot;Working - Contacted&quot;},{&quot;value&quot;:&quot;Closed - Converted&quot;,&quot;key&quot;:&quot;Closed - Converted&quot;},{&quot;value&quot;:&quot;Closed - Not Converted&quot;,&quot;key&quot;:&quot;Closed - Not Converted&quot;}],&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;SalesForce Leads&quot;,&quot;link_name&quot;:&quot;SalesForce_Leads&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:5}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report SalesForce Contacts module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/SalesForceContacts_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="1277596758">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Last Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;LastName&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Salutation&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Salutation&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;First Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;FirstName&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;AccountId&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Title&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Title&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Department&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Department&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Birthdate&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Birthdate&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Reports To&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;ReportsToId&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Lead Source&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;LeadSource&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Phone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Home Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;HomePhone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mobile&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;MobilePhone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;OtherPhone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Fax&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Fax&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Assistant&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;AssistantName&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Asst. Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;AssistantPhone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing Street&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;MailingStreet&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;MailingCity&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing State/Province&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;MailingState&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing Zip/Postal Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;MailingPostalCode&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;MailingCountry&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other Street&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:23,&quot;labelname&quot;:&quot;OtherStreet&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:24,&quot;labelname&quot;:&quot;OtherCity&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other State/Province&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:25,&quot;labelname&quot;:&quot;OtherState&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other Zip/Postal Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:26,&quot;labelname&quot;:&quot;OtherPostalCode&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:27,&quot;labelname&quot;:&quot;OtherCountry&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Languages&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:28,&quot;labelname&quot;:&quot;Languages__c&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Level&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:29,&quot;labelname&quot;:&quot;Level__c&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:30,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;SalesForceContacts Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;SalesForceContacts&quot;,&quot;linkname&quot;:&quot;SalesForceContacts&quot;},&quot;linkname&quot;:&quot;SalesForceContacts_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Purchase_Orders module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Purchase_Orders_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="-909758464">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Subject&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Subject&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Vendor Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Vendor_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;PO Number&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;PO_Number&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Contact Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Contact_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;PO Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;PO_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Due Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Due_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Carrier&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Carrier&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Excise Duty&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Excise_Duty&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Sales Commission&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Sales_Commission&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Billing_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Shipping_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Billing_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Shipping_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Billing_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Shipping_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Billing_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Shipping_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Billing_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;Shipping_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Terms and Conditions&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;Terms_and_Conditions&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Purchase Orders Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM Purchase Orders&quot;,&quot;linkname&quot;:&quot;CRM_Purchase_Orders&quot;},&quot;linkname&quot;:&quot;CRM_Purchase_Orders_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.meta</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.data</stringProp>
              <stringProp name="EXPECTED_VALUE"></stringProp>
              <boolProp name="JSONVALIDATION">false</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Invoices_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Invoices_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="-616540765">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Subject&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Subject&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Account_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Sales Order&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Sales_Order&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Invoice Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Invoice_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Purchase Order&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Purchase_Order&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Due Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Due_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Excise Duty&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Excise_Duty&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Sales Commission&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Sales_Commission&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Contact Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Contact_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Billing_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Shipping_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Billing_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Shipping_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Billing_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Shipping_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Billing_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Shipping_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Billing_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;Shipping_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Terms and Conditions&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;Terms_and_Conditions&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Invoices Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM Invoices&quot;,&quot;linkname&quot;:&quot;CRM_Invoices&quot;},&quot;linkname&quot;:&quot;CRM_Invoices_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Quotes_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Quotes_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="2009628020">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Subject&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Subject&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Account_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Potential Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Potential_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Quote Stage&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Quote_Stage&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Valid Until&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Valid_Until&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Contact Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Contact_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Carrier&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Carrier&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Billing_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Shipping_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Billing_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Shipping_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Billing_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Shipping_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Billing_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Shipping_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Billing_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Shipping_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Terms and Conditions&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Terms_and_Conditions&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Quotes Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM Quotes&quot;,&quot;linkname&quot;:&quot;CRM_Quotes&quot;},&quot;linkname&quot;:&quot;CRM_Quotes_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Campaigns_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Campaigns_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="205356094">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Campaign Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Campaign_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Type&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Type&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Start Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Start_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;End Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;End_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Expected Revenue&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Expected_Revenue&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Budgeted Cost&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Budgeted_Cost&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Actual Cost&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Actual_Cost&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Expected Response&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Expected_Response&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Numbers sent&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Numbers_sent&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Campaigns Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM Campaigns&quot;,&quot;linkname&quot;:&quot;CRM_Campaigns&quot;},&quot;linkname&quot;:&quot;CRM_Campaigns_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_SalesOrders_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_SalesOrders_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="-2138425497">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Subject&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Subject&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Account_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Potential Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Potential_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Purchase Order&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Purchase_Order&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Quote Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Quote_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Due Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Due_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Pending&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Pending&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Contact Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Contact_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Carrier&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Carrier&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Excise Duty&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Excise_Duty&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Sales Commission&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Sales_Commission&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Billing_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Shipping_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Billing_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Shipping_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Billing_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Shipping_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Billing_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;Shipping_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;Billing_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;Shipping_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Terms and Conditions&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:23,&quot;labelname&quot;:&quot;Terms_and_Conditions&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:24,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM SalesOrders Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM SalesOrders&quot;,&quot;linkname&quot;:&quot;CRM_SalesOrders&quot;},&quot;linkname&quot;:&quot;CRM_SalesOrders_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Deals_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Deals_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="1082876451">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Deal Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Potential_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Closing Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Closing_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Account_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Stage&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Stage&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Amount&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Amount&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Type&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Type&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Probability (%)&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Probability&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Next Step&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Next_Step&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Lead Source&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Lead_Source&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Campaign Source&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Campaign_Source&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Contact Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Contact_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Deals Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM Deals&quot;,&quot;linkname&quot;:&quot;CRM_Deals&quot;},&quot;linkname&quot;:&quot;CRM_Deals_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Contacts_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Contacts_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="2049032182">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Solution Title&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Solution_Title&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Question&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Question&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Answer&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Answer&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Product Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Product_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Add Comment&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Add_Comment&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Contacts Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRMSolutions&quot;,&quot;linkname&quot;:&quot;CRM_Solutions&quot;},&quot;linkname&quot;:&quot;CRM_Contacts_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Accounts_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Accounts_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="-51291579">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Account_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Rating&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Rating&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Phone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Fax&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Fax&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Site&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Account_Site&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Parent Account&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Parent_Account&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Website&quot;,&quot;type&quot;:&quot;URL&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Website&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Ticker Symbol&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Ticker_Symbol&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Number&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Account_Number&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Type&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Account_Type&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Ownership&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Ownership&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Industry&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Industry&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Employees&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Employees&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Annual Revenue&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Annual_Revenue&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;SIC Code&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;SIC_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Billing_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Shipping_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Billing_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Shipping_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;Billing_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;Shipping_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;Billing_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:23,&quot;labelname&quot;:&quot;Shipping_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:24,&quot;labelname&quot;:&quot;Billing_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:25,&quot;labelname&quot;:&quot;Shipping_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:26,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Accounts Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM Accounts&quot;,&quot;linkname&quot;:&quot;CRM_Accounts&quot;},&quot;linkname&quot;:&quot;CRM_Accounts_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report CRM_Cases_Report module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/loadtest/integration-forms/view/CRM_Cases_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
                <stringProp name="929863187">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Case Origin&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Case_Origin&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Subject&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Subject&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Product Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Product_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Priority&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Priority&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Type&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Type&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Related To&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Related_To&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Account_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Potential Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Potential_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Reported By&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Reported_By&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Phone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Description&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Internal Comments&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Internal_Comments&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Solution&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Solution&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Add Comments&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Add_Comments&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;CRM Cases Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;CRM Cases&quot;,&quot;linkname&quot;:&quot;CRM_Cases&quot;},&quot;linkname&quot;:&quot;CRM_Cases_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Custom Action" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Gallery app custom action Open URL supportdesk case view" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;data&quot;:&#xd;
{&#xd;
&quot;ID&quot;:[54258000018571029]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/loadtest/support-desk/view/All_Cases/action/Case_View7/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1192742663">{&quot;code&quot;:3000,&quot;tasks&quot;:[{&quot;task&quot;:&quot;open_url&quot;,&quot;window_type&quot;:&quot;new window&quot;,&quot;url&quot;:&quot;#View:Case_View?caseStr=54258000018571029&quot;}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};



 
if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MRL2 uitest" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${Authfileuitest}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">url,Authorization</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="c4 custom actions with successmessage" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="c4 custom action Open URL and successmessage" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;data&quot;:&#xd;
{&#xd;
&quot;ID&quot;:[43527000009229057]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/uitest/custom-action-bala/view/Custom_action_Report/action/Open_google_com/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1326605254">{&quot;code&quot;:3000,&quot;tasks&quot;:[{&quot;task&quot;:&quot;open_url&quot;,&quot;window_type&quot;:&quot;New window&quot;,&quot;url&quot;:&quot;http://www.google.com&quot;},{&quot;task&quot;:&quot;success_message&quot;,&quot;message&quot;:&quot;okkkkkk&quot;}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};



 
if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="c4 custom action Open form with Lookup field param" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;data&quot;:&#xd;
{&#xd;
&quot;ID&quot;:[43527000009229057]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/uitest/custom-action-bala/view/Custom_action_Report/action/Open_form_with_param_to_L/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-692588002">{&quot;code&quot;:3000,&quot;tasks&quot;:[{&quot;task&quot;:&quot;open_url&quot;,&quot;window_type&quot;:&quot;Same window&quot;,&quot;url&quot;:&quot;#Form:Lookup_field?Lookup_field=43527000009229057&quot;},{&quot;task&quot;:&quot;success_message&quot;,&quot;message&quot;:&quot;opeeeene&quot;}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};



 
if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="c4 custom action with task Update Record With Login User ID" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;data&quot;:&#xd;
{&#xd;
&quot;ID&quot;:[43527000009229057]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/uitest/custom-action-bala/view/Custom_action_Report/action/Update_field_with_Login_u/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-78175955">{&quot;code&quot;:3000,&quot;tasks&quot;:[{&quot;task&quot;:&quot;success_message&quot;,&quot;message&quot;:&quot;Check the record&quot;}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};



 
if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="c4 custom action with task Close" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;data&quot;:&#xd;
{&#xd;
&quot;ID&quot;:[43527000009229057]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/uitest/custom-action-bala/view/Custom_action_Report/action/Close/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-469826559">{&quot;code&quot;:3000,&quot;tasks&quot;:[{&quot;task&quot;:&quot;success_message&quot;,&quot;message&quot;:&quot;closed&quot;}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};



 
if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="c4 custom action with Open Other App Lookup Report" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;data&quot;:&#xd;
{&#xd;
&quot;ID&quot;:[43527000000185056]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/uitest/custom-action-bala/view/Custom_action_with_other_app_lookup_Report/action/Open_other_app_lookup/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1030386985">{&quot;code&quot;:3000,&quot;tasks&quot;:[{&quot;task&quot;:&quot;open_url&quot;,&quot;window_type&quot;:&quot;same window&quot;,&quot;url&quot;:&quot;https://app.localzohocreator.com/uitest/second-lookup#Report:Single_line_lookup_through_script_Report&quot;},{&quot;task&quot;:&quot;success_message&quot;,&quot;message&quot;:&quot;Other app lookup opened&quot;}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};



 
if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="c4 rec edit customaction check " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
&quot;data&quot;:&#xd;
{&#xd;
&quot;ID&quot;:[43527000003941101]&#xd;
}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/uitest/open-url/view/open_url_Report/action/rec_edit/execute</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1926368086">{&quot;code&quot;:3000,&quot;tasks&quot;:[{&quot;task&quot;:&quot;open_url&quot;,&quot;window_type&quot;:&quot;Same window&quot;,&quot;url&quot;:&quot;https://app.localzohocreator.com/uitest/open-url/#Form:open_url?recLinkID=43527000003941101&amp;viewLinkName=open_url_Report&quot;},{&quot;task&quot;:&quot;success_message&quot;,&quot;message&quot;:&quot;rec edited&quot;}]}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//		
//		ErrorCount+=1;
//	}
//	else
//	{
//		
//	};
//};



 
if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MRL2 Creatorqac5new" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${AuthfileCreatorqaC5new}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">url,Authorization</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Filters" enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="subform custom filters" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">creatorqac5new</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/creatorqac5new/customfiltersremaining/view/SubFormDateTimeCustom/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="181696302">&quot;customfilters&quot;:[{&quot;criteriaid&quot;:60366000004013487,&quot;criterianame&quot;:&quot;SubformDateTimeEquals&quot;},{&quot;criteriaid&quot;:60366000004013489,&quot;criterianame&quot;:&quot;SubFormDateTimeAfter&quot;},{&quot;criteriaid&quot;:60366000004013491,&quot;criterianame&quot;:&quot;SubFormDateTimeBefore&quot;}]</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">3</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Subform Date time Equals custom filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">creatorqac5new</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:60366000004013487;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/creatorqac5new/customfiltersremaining/view/SubFormDateTimeCustom/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-202730926">{&quot;data&quot;:[{&quot;SubForm.Date_Time&quot;:[{&quot;value&quot;:&quot;10-Sep-2020 14:31:24&quot;}],&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;60366000004017059&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:1,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.record_count</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubFormDateTimeAfter Custom Filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">creatorqac5new</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:60366000004013489;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/creatorqac5new/customfiltersremaining/view/SubFormDateTimeCustom/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="882141109">{&quot;data&quot;:[{&quot;SubForm.Date_Time&quot;:[{&quot;value&quot;:&quot;10-Sep-2020 14:31:24&quot;}],&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;60366000004017059&quot;},{&quot;SubForm.Date_Time&quot;:[{&quot;value&quot;:&quot;01-Sep-2020 14:30:31&quot;}],&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;60366000004017039&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:2,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.record_count</stringProp>
              <stringProp name="EXPECTED_VALUE">2</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SubFormDateTimeBefore Custom Filter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">creatorqac5new</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="filterVal" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">CustomFilter:60366000004013491;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">filterVal</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/creatorqac5new/customfiltersremaining/view/SubFormDateTimeCustom/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-644414963">{&quot;data&quot;:[{&quot;SubForm.Date_Time&quot;:[{&quot;value&quot;:&quot;15-Jul-2020 14:30:54&quot;}],&quot;zc_recordcomments&quot;:{&quot;count&quot;:0},&quot;ID&quot;:&quot;60366000004017049&quot;}],&quot;submeta&quot;:{&quot;recordcount&quot;:1,&quot;isGrouped&quot;:false}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">8</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.record_count</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">true</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MRL2 Creatorqac53" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${AuthfileCreatorqaC53}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">url,Authorization</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="CustomLayout " enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customLayout quickview Image Field " enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">creatorqac53</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/mobileapi/v2/creatorqac53/reportscomplete/view/CustomLay_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1805161767">value = &apos;${Image}&apos;</stringProp>
                <stringProp name="-1389400232">&quot;Image&quot;:&quot;/creatorqac53/reportscomplete/CustomLay_Report/52271000037001003/Image/image-download/1602054361048_Screenshot_2020-10-07_at_10.58.24_AM.png&quot;</stringProp>
                <stringProp name="-822042131">&quot;layouts&quot;:&quot;&lt;layout&gt;&lt;quickview&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="JSON Assertion" enabled="true">
              <stringProp name="JSON_PATH">$.submeta.recordcount</stringProp>
              <stringProp name="EXPECTED_VALUE">1</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">true</boolProp>
            </JSONPathAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="MRL2 Creatorqac5" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">${AuthfileCreatorqaC5}</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">url,Authorization</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <CriticalSectionController guiclass="CriticalSectionControllerGui" testclass="CriticalSectionController" testname="Integration Forms Recruit Data fetch and edit " enabled="true">
          <stringProp name="CriticalSectionController.lockName">global_lock</stringProp>
        </CriticalSectionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report Zoho Recruit Contacts module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/view/Recruit_Contacts_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-880479505">{&quot;data&quot;:[{&quot;Last_Name&quot;:&quot;</stringProp>
                <stringProp name="1763398655">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Last Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Last_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;First Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;First_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Client Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Client_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Job Title&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Job_Title&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Department&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Department&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Work Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Work_Phone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Fax&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Fax&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mobile&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Mobile&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Skype ID&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Skype_ID&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Twitter&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Twitter&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Mailing_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Other_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Mailing_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Other_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Mailing_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Other_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing Zip&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Mailing_Zip&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other Zip&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Other_Zip&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mailing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;Mailing_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Other Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;Other_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Source&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;Source&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Is primary contact&quot;,&quot;type&quot;:&quot;CHECK_BOX&quot;,&quot;sequencenumber&quot;:23,&quot;labelname&quot;:&quot;Is_primary_contact&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email Opt Out&quot;,&quot;type&quot;:&quot;CHECK_BOX&quot;,&quot;sequencenumber&quot;:24,&quot;labelname&quot;:&quot;Email_Opt_Out&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:25,&quot;labelname&quot;:&quot;Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;Recruit Contacts Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;Recruit Contacts&quot;,&quot;linkname&quot;:&quot;Recruit_Contacts&quot;},&quot;linkname&quot;:&quot;Recruit_Contacts_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho Recruit Contacts Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Recruit_Contacts_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">7865000002049001</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/form/Recruit_Contacts/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-101534754">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;Last_Name&quot;:&quot;</stringProp>
                <stringProp name="2077212130">&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:3,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Last Name&quot;,&quot;link_name&quot;:&quot;Last_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Recruit Contacts&quot;,&quot;link_name&quot;:&quot;Recruit_Contacts&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:2}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report Recruit_Candidates module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/view/Recruit_Candidates_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-880479505">{&quot;data&quot;:[{&quot;Last_Name&quot;:&quot;</stringProp>
                <stringProp name="-1416295719">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Last Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Last_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;First Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;First_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Secondary Email&quot;,&quot;type&quot;:&quot;EMAIL_ADDRESS&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Secondary_Email&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Mobile&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Mobile&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Phone&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Phone&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Fax&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Fax&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Website&quot;,&quot;type&quot;:&quot;URL&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Website&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Zip Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Zip_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Experience in Years&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Experience_in_Years&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Highest Qualification Held&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Highest_Qualification_Held&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Current Job Title&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Current_Job_Title&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Current Employer&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Current_Employer&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Expected Salary&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Expected_Salary&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Current Salary&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Current_Salary&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Skill Set&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:20,&quot;labelname&quot;:&quot;Skill_Set&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Additional Info&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:21,&quot;labelname&quot;:&quot;Additional_Info&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Skype ID&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:22,&quot;labelname&quot;:&quot;Skype_ID&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Twitter&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:23,&quot;labelname&quot;:&quot;Twitter&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Candidate Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:24,&quot;labelname&quot;:&quot;Candidate_Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Source&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:25,&quot;labelname&quot;:&quot;Source&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Candidate Owner&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:26,&quot;labelname&quot;:&quot;Candidate_Owner&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Email Opt Out&quot;,&quot;type&quot;:&quot;CHECK_BOX&quot;,&quot;sequencenumber&quot;:27,&quot;labelname&quot;:&quot;Email_Opt_Out&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;Recruit Candidates Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;Recruit Candidates&quot;,&quot;linkname&quot;:&quot;Recruit_Candidates&quot;},&quot;linkname&quot;:&quot;Recruit_Candidates_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho Recruit candidates Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Recruit_Candidates_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">7865000002049051</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/form/Recruit_Candidates/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-101534754">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;Last_Name&quot;:&quot;</stringProp>
                <stringProp name="-1451997566">&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:3,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Last Name&quot;,&quot;link_name&quot;:&quot;Last_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Recruit Candidates&quot;,&quot;link_name&quot;:&quot;Recruit_Candidates&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:2}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho Recruit Clients Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Recruit_Clients_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">7865000002049044</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/form/Recruit_Clients/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1463345645">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;Client_Name&quot;:&quot;</stringProp>
                <stringProp name="-521583482">&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Client Name&quot;,&quot;link_name&quot;:&quot;Client_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Recruit Clients&quot;,&quot;link_name&quot;:&quot;Recruit_Clients&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:5}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Zoho Recruit candidates Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Recruit_Job_Openings_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">7865000002049030</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/form/Recruit_Candidates/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1275196700">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;Industry&quot;:&quot;</stringProp>
                <stringProp name="-2143248710">&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Posting Title&quot;,&quot;link_name&quot;:&quot;Posting_Title&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:3,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Client Name&quot;,&quot;link_name&quot;:&quot;Client_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:11,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;display_name&quot;:&quot;Industry&quot;,&quot;link_name&quot;:&quot;Industry&quot;,&quot;type&quot;:12,&quot;choices&quot;:[{&quot;value&quot;:&quot;Communications&quot;,&quot;key&quot;:&quot;Communications&quot;},{&quot;value&quot;:&quot;Technology&quot;,&quot;key&quot;:&quot;Technology&quot;},{&quot;value&quot;:&quot;Government/Military&quot;,&quot;key&quot;:&quot;Government/Military&quot;},{&quot;value&quot;:&quot;Manufacturing&quot;,&quot;key&quot;:&quot;Manufacturing&quot;},{&quot;value&quot;:&quot;Financial Services&quot;,&quot;key&quot;:&quot;Financial Services&quot;},{&quot;value&quot;:&quot;IT Services&quot;,&quot;key&quot;:&quot;IT Services&quot;},{&quot;value&quot;:&quot;Education&quot;,&quot;key&quot;:&quot;Education&quot;},{&quot;value&quot;:&quot;Pharma&quot;,&quot;key&quot;:&quot;Pharma&quot;},{&quot;value&quot;:&quot;Real Estate&quot;,&quot;key&quot;:&quot;Real Estate&quot;},{&quot;value&quot;:&quot;Consulting&quot;,&quot;key&quot;:&quot;Consulting&quot;},{&quot;value&quot;:&quot;Health Care&quot;,&quot;key&quot;:&quot;Health Care&quot;}],&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Recruit Job Openings&quot;,&quot;link_name&quot;:&quot;Recruit_Job_Openings&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:5}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration forms Recruit_Job_Openings Edit Record" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="formAccessType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">formAccessType</stringProp>
                  <stringProp name="Argument.value">3</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewLinkName" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">Recruit_Job_Openings_Report</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">viewLinkName</stringProp>
                </elementProp>
                <elementProp name="ID" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">7865000002049030</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">ID</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">creator.localzoho.com</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/form/Recruit_Job_Openings/meta</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.6.4(Android 7.1.1;Motorola Nexus 6)</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.6.4:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1275196700">{&quot;code&quot;:3000,&quot;data&quot;:{&quot;Industry&quot;:&quot;</stringProp>
                <stringProp name="-2143248710">&quot;meta&quot;:{&quot;field_layout&quot;:[{&quot;sequence_number&quot;:1,&quot;is_enabled&quot;:false,&quot;unique&quot;:false,&quot;field_column&quot;:0,&quot;display_name&quot;:&quot;Section&quot;,&quot;link_name&quot;:&quot;Section&quot;,&quot;type&quot;:28,&quot;fields&quot;:[{&quot;sequence_number&quot;:2,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Posting Title&quot;,&quot;link_name&quot;:&quot;Posting_Title&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:3,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;max_char&quot;:255,&quot;display_name&quot;:&quot;Client Name&quot;,&quot;link_name&quot;:&quot;Client_Name&quot;,&quot;type&quot;:1,&quot;mandatory&quot;:true},{&quot;sequence_number&quot;:11,&quot;unique&quot;:false,&quot;field_column&quot;:1,&quot;display_name&quot;:&quot;Industry&quot;,&quot;link_name&quot;:&quot;Industry&quot;,&quot;type&quot;:12,&quot;choices&quot;:[{&quot;value&quot;:&quot;Communications&quot;,&quot;key&quot;:&quot;Communications&quot;},{&quot;value&quot;:&quot;Technology&quot;,&quot;key&quot;:&quot;Technology&quot;},{&quot;value&quot;:&quot;Government/Military&quot;,&quot;key&quot;:&quot;Government/Military&quot;},{&quot;value&quot;:&quot;Manufacturing&quot;,&quot;key&quot;:&quot;Manufacturing&quot;},{&quot;value&quot;:&quot;Financial Services&quot;,&quot;key&quot;:&quot;Financial Services&quot;},{&quot;value&quot;:&quot;IT Services&quot;,&quot;key&quot;:&quot;IT Services&quot;},{&quot;value&quot;:&quot;Education&quot;,&quot;key&quot;:&quot;Education&quot;},{&quot;value&quot;:&quot;Pharma&quot;,&quot;key&quot;:&quot;Pharma&quot;},{&quot;value&quot;:&quot;Real Estate&quot;,&quot;key&quot;:&quot;Real Estate&quot;},{&quot;value&quot;:&quot;Consulting&quot;,&quot;key&quot;:&quot;Consulting&quot;},{&quot;value&quot;:&quot;Health Care&quot;,&quot;key&quot;:&quot;Health Care&quot;}],&quot;mandatory&quot;:true}],&quot;mandatory&quot;:false}],&quot;buttons&quot;:[{&quot;sequence_number&quot;:1,&quot;action_type&quot;:2,&quot;link_name&quot;:&quot;update&quot;,&quot;display_name&quot;:&quot;Update&quot;,&quot;type&quot;:62}],&quot;success_message&quot;:&quot;Data Added Successfully!&quot;,&quot;date_format&quot;:&quot;dd-MMM-yyyy&quot;,&quot;is_c4_layout&quot;:false,&quot;form_type&quot;:&quot;1&quot;,&quot;display_name&quot;:&quot;Recruit Job Openings&quot;,&quot;link_name&quot;:&quot;Recruit_Job_Openings&quot;,&quot;time_zone&quot;:&quot;Asia/Kolkata&quot;,&quot;is_24_hour_format&quot;:true,&quot;is_admin_user&quot;:true,&quot;form_layout&quot;:5}}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report Recruit_Clients module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/view/Recruit_Clients_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1350028692">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Client Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Client_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Parent Client&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Parent_Client&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Contact Number&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Contact_Number&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Fax&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Fax&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Website&quot;,&quot;type&quot;:&quot;URL&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Website&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Manager&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Account_Manager&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Industry&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Industry&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;About&quot;,&quot;type&quot;:&quot;TEXT_AREA&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;About&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Source&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Source&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Billing_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Street&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;Shipping_Street&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Billing_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;Shipping_City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Billing_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Shipping_State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Billing_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Shipping_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Billing Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Billing_Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Shipping Country&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Shipping_Country&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;Recruit Clients Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;Recruit Clients&quot;,&quot;linkname&quot;:&quot;Recruit_Clients&quot;},&quot;linkname&quot;:&quot;Recruit_Clients_Report&quot;,&quot;recordcomments&quot;:{&quot;enabled&quot;:false},&quot;totalrecords&quot;:0,&quot;dateformat&quot;:&quot;dd-MMM-yyyy&quot;}</stringProp>
                <stringProp name="1590025444">{&quot;data&quot;:[{&quot;Client_Name&quot;:&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Integration Forms Report Recruit_Job Openings module data check" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="fromIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">fromIDX</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="setCriteria" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">setCriteria</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="toIDX" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">toIDX</stringProp>
                  <stringProp name="Argument.value">50</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="viewmeta" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">viewmeta</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="searchCrit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">searchCrit</stringProp>
                  <stringProp name="Argument.value">false</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_ownername" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_ownername</stringProp>
                  <stringProp name="Argument.value">loadtest</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="scope" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">scope</stringProp>
                  <stringProp name="Argument.value">creatorapi</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="splitsubformvalue" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">splitsubformvalue</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zml" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zml</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="zc_locale" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">zc_locale</stringProp>
                  <stringProp name="Argument.value">en_IN</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="deviceType" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">deviceType</stringProp>
                  <stringProp name="Argument.value">2</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/api/v2/creatorqac5/integration-api/view/Recruit_Job_Openings_Report/viewrecords</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="AGENT-TYPE" elementType="Header">
                  <stringProp name="Header.name">AGENT-TYPE</stringProp>
                  <stringProp name="Header.value">ZohoCreator - Android</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">ZohoCreator/5.5.8(Android 7.1.1;Motorola Nexus 6)/ZohoPortalApp/</stringProp>
                </elementProp>
                <elementProp name="zc_device_info" elementType="Header">
                  <stringProp name="Header.name">zc_device_info</stringProp>
                  <stringProp name="Header.value">os=2:osversion=7.1.1:devicename=Motorola Nexus 6:devicetype=2:appversion=5.5.8:codesignedapp=false</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1536370014">&quot;meta&quot;:{&quot;enable_notification&quot;:false,&quot;printTemplate&quot;:false,&quot;columns&quot;:[{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Posting Title&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:1,&quot;labelname&quot;:&quot;Posting_Title&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Client Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:2,&quot;labelname&quot;:&quot;Client_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Industry&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:10,&quot;labelname&quot;:&quot;Industry&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Contact Name&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:3,&quot;labelname&quot;:&quot;Contact_Name&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Assigned Recruiter(s)&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:4,&quot;labelname&quot;:&quot;Assigned_Recruiter&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Account Manager&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:5,&quot;labelname&quot;:&quot;Account_Manager&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Target Date&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:6,&quot;labelname&quot;:&quot;Target_Date&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Date Opened&quot;,&quot;type&quot;:&quot;DATE&quot;,&quot;sequencenumber&quot;:7,&quot;labelname&quot;:&quot;Date_Opened&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Job Opening Status&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:8,&quot;labelname&quot;:&quot;Job_Opening_Status&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Job Type&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:9,&quot;labelname&quot;:&quot;Job_Type&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;City&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:11,&quot;labelname&quot;:&quot;City&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Zip Code&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:12,&quot;labelname&quot;:&quot;Zip_Code&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;State&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:13,&quot;labelname&quot;:&quot;State&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Country&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:14,&quot;labelname&quot;:&quot;Country&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Work Experience&quot;,&quot;type&quot;:&quot;INLINE_SINGLE_SELECT&quot;,&quot;sequencenumber&quot;:15,&quot;labelname&quot;:&quot;Work_Experience&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Salary&quot;,&quot;type&quot;:&quot;TEXT&quot;,&quot;sequencenumber&quot;:16,&quot;labelname&quot;:&quot;Salary&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Number of Positions&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:17,&quot;labelname&quot;:&quot;Number_of_Positions&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Revenue per Position&quot;,&quot;type&quot;:&quot;NUMBER&quot;,&quot;sequencenumber&quot;:18,&quot;labelname&quot;:&quot;Revenue_per_Position&quot;},{&quot;ishidden&quot;:false,&quot;displayname&quot;:&quot;Job Description&quot;,&quot;type&quot;:&quot;RICH_TEXT_AREA&quot;,&quot;sequencenumber&quot;:19,&quot;labelname&quot;:&quot;Job_Description&quot;}],&quot;timezone&quot;:&quot;Asia/Kolkata&quot;,&quot;is24hourformat&quot;:true,&quot;customrecordsummary&quot;:false,&quot;isintegrationform&quot;:true,&quot;permissions&quot;:{&quot;add&quot;:true,&quot;edit&quot;:true,&quot;bulkedit&quot;:false,&quot;duplicate&quot;:false,&quot;delete&quot;:false,&quot;export&quot;:false},&quot;displayname&quot;:&quot;Recruit Job Openings Report&quot;,&quot;isAggregateSummaryEnabled&quot;:false,&quot;baseform&quot;:{&quot;displayname&quot;:&quot;Recruit Job Openings&quot;,&quot;linkname&quot;:&quot;Recruit_Job_Openings&quot;}</stringProp>
                <stringProp name="1590544946">{&quot;data&quot;:[</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
              <stringProp name="BeanShellAssertion.query">import java.io.File;
import java.util.Date;
import java.lang.String.*;
import org.apache.jemter.services.FileServer;
import org.apache.jmeter.assertions.AssertionResult;

Date date=new Date();
DateVar =date.toString();
TimeStamp= prev.getTimeStamp();
Time=prev.getTime();
URL=prev.getUrlAsString();
Result=&quot;FAIL&quot;;
Label=prev.getSampleLabel();
ThreadName=prev.getThreadName();
//TimeElapsed=prev.getTimeElapsed();
ResponseCode=prev.getResponseCode();
ResponseMessage=prev.getResponseMessage();


Response=prev.getResponseDataAsString();

log.info(&quot;samplecount&quot;+prev.getSampleCount());
log.info(&quot;errorcount -----&quot;+prev.getErrorCount());
log.info(&quot;sample Sent bytes :::&quot;+ prev.getBytesAsLong());

log.info(&quot;sample Sent bytes Error Count :::&quot;+ prev.getErrorCount());
int errCnt = prev.getErrorCount();
prev.setErrorCount(errCnt);

ErrorCount=prev.getErrorCount();

log.info(&quot;errorcount after setting in sample-----&quot;+prev.getErrorCount());

AssertionResult[] FailMes=prev.getAssertionResults();
log.info(&quot;Assertion result :: &quot; +FailMes.length);

//for(AssertionResult asres:FailMes){
//log.info(&quot;Assertion result status ------:: &quot; +	asres.isFailure());
//	{
//
//		ErrorCount+=1;
//	}
//	else
//	{
//
//	};
//};




if(ResponseCode.equals(&quot;200&quot;) &amp;&amp; ErrorCount==0)
{
	Result=&quot;PASS&quot;;
}
log.info(&quot;result&quot;+${JMeterThread.last_sample_ok});
f=new FileOutputStream(&quot;${resultfile}&quot;,true);
p= new PrintStream(f);
//log.info(DateVar + &quot; , &quot; + Label + &quot; , &quot;  + ResponseCode + &quot; , &quot; + ThreadName + &quot; , &quot; + TimeStamp + &quot;,&quot; + URL + &quot; , &quot;+Result+&quot; , &quot; + ErrorCount);
p.println(DateVar + &quot;,&quot; + ThreadName+ &quot;,&quot; + Result + &quot;,&quot; + Time+ &quot;,&quot; + Label+ &quot;,&quot; + TimeStamp + &quot;,&quot; +  URL);


p.close();
f.close();</stringProp>
              <stringProp name="BeanShellAssertion.filename"></stringProp>
              <stringProp name="BeanShellAssertion.parameters"></stringProp>
              <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
            </BeanShellAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
